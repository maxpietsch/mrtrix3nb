# AUTOGENERATED! DO NOT EDIT! File to edit: utils.ipynb (unless otherwise specified).

__all__ = ['get_turbo_cm', 'plot_dirs', 'response_to_r', 'polarplotstyle', 'loadrf', 'plot_responses', 'ntheta',
           'theta_1d', 'phi_1d', 'xyz_2d', 'plot_response_coef', 'Image', 'load_mrtrix', 'save_mrtrix']

# Cell
import matplotlib.cm
from matplotlib.colors import ListedColormap

def get_turbo_cm():
    # Turbo ColorMap:
    # Copyright 2019 Google LLC.
    # SPDX-License-Identifier: Apache-2.0
    # Author: Anton Mikhailov
    turbo_colormap_data = [[0.18995, 0.07176, 0.23217], [0.19483, 0.08339, 0.26149], [0.19956, 0.09498, 0.29024],
                           [0.20415, 0.10652, 0.31844], [0.20860, 0.11802, 0.34607], [0.21291, 0.12947, 0.37314],
                           [0.21708, 0.14087, 0.39964], [0.22111, 0.15223, 0.42558], [0.22500, 0.16354, 0.45096],
                           [0.22875, 0.17481, 0.47578], [0.23236, 0.18603, 0.50004], [0.23582, 0.19720, 0.52373],
                           [0.23915, 0.20833, 0.54686], [0.24234, 0.21941, 0.56942], [0.24539, 0.23044, 0.59142],
                           [0.24830, 0.24143, 0.61286], [0.25107, 0.25237, 0.63374], [0.25369, 0.26327, 0.65406],
                           [0.25618, 0.27412, 0.67381], [0.25853, 0.28492, 0.69300], [0.26074, 0.29568, 0.71162],
                           [0.26280, 0.30639, 0.72968], [0.26473, 0.31706, 0.74718], [0.26652, 0.32768, 0.76412],
                           [0.26816, 0.33825, 0.78050], [0.26967, 0.34878, 0.79631], [0.27103, 0.35926, 0.81156],
                           [0.27226, 0.36970, 0.82624], [0.27334, 0.38008, 0.84037], [0.27429, 0.39043, 0.85393],
                           [0.27509, 0.40072, 0.86692], [0.27576, 0.41097, 0.87936], [0.27628, 0.42118, 0.89123],
                           [0.27667, 0.43134, 0.90254], [0.27691, 0.44145, 0.91328], [0.27701, 0.45152, 0.92347],
                           [0.27698, 0.46153, 0.93309], [0.27680, 0.47151, 0.94214], [0.27648, 0.48144, 0.95064],
                           [0.27603, 0.49132, 0.95857], [0.27543, 0.50115, 0.96594], [0.27469, 0.51094, 0.97275],
                           [0.27381, 0.52069, 0.97899], [0.27273, 0.53040, 0.98461], [0.27106, 0.54015, 0.98930],
                           [0.26878, 0.54995, 0.99303], [0.26592, 0.55979, 0.99583], [0.26252, 0.56967, 0.99773],
                           [0.25862, 0.57958, 0.99876], [0.25425, 0.58950, 0.99896], [0.24946, 0.59943, 0.99835],
                           [0.24427, 0.60937, 0.99697], [0.23874, 0.61931, 0.99485], [0.23288, 0.62923, 0.99202],
                           [0.22676, 0.63913, 0.98851], [0.22039, 0.64901, 0.98436], [0.21382, 0.65886, 0.97959],
                           [0.20708, 0.66866, 0.97423], [0.20021, 0.67842, 0.96833], [0.19326, 0.68812, 0.96190],
                           [0.18625, 0.69775, 0.95498], [0.17923, 0.70732, 0.94761], [0.17223, 0.71680, 0.93981],
                           [0.16529, 0.72620, 0.93161], [0.15844, 0.73551, 0.92305], [0.15173, 0.74472, 0.91416],
                           [0.14519, 0.75381, 0.90496], [0.13886, 0.76279, 0.89550], [0.13278, 0.77165, 0.88580],
                           [0.12698, 0.78037, 0.87590], [0.12151, 0.78896, 0.86581], [0.11639, 0.79740, 0.85559],
                           [0.11167, 0.80569, 0.84525], [0.10738, 0.81381, 0.83484], [0.10357, 0.82177, 0.82437],
                           [0.10026, 0.82955, 0.81389], [0.09750, 0.83714, 0.80342], [0.09532, 0.84455, 0.79299],
                           [0.09377, 0.85175, 0.78264], [0.09287, 0.85875, 0.77240], [0.09267, 0.86554, 0.76230],
                           [0.09320, 0.87211, 0.75237], [0.09451, 0.87844, 0.74265], [0.09662, 0.88454, 0.73316],
                           [0.09958, 0.89040, 0.72393], [0.10342, 0.89600, 0.71500], [0.10815, 0.90142, 0.70599],
                           [0.11374, 0.90673, 0.69651], [0.12014, 0.91193, 0.68660], [0.12733, 0.91701, 0.67627],
                           [0.13526, 0.92197, 0.66556], [0.14391, 0.92680, 0.65448], [0.15323, 0.93151, 0.64308],
                           [0.16319, 0.93609, 0.63137], [0.17377, 0.94053, 0.61938], [0.18491, 0.94484, 0.60713],
                           [0.19659, 0.94901, 0.59466], [0.20877, 0.95304, 0.58199], [0.22142, 0.95692, 0.56914],
                           [0.23449, 0.96065, 0.55614], [0.24797, 0.96423, 0.54303], [0.26180, 0.96765, 0.52981],
                           [0.27597, 0.97092, 0.51653], [0.29042, 0.97403, 0.50321], [0.30513, 0.97697, 0.48987],
                           [0.32006, 0.97974, 0.47654], [0.33517, 0.98234, 0.46325], [0.35043, 0.98477, 0.45002],
                           [0.36581, 0.98702, 0.43688], [0.38127, 0.98909, 0.42386], [0.39678, 0.99098, 0.41098],
                           [0.41229, 0.99268, 0.39826], [0.42778, 0.99419, 0.38575], [0.44321, 0.99551, 0.37345],
                           [0.45854, 0.99663, 0.36140], [0.47375, 0.99755, 0.34963], [0.48879, 0.99828, 0.33816],
                           [0.50362, 0.99879, 0.32701], [0.51822, 0.99910, 0.31622], [0.53255, 0.99919, 0.30581],
                           [0.54658, 0.99907, 0.29581], [0.56026, 0.99873, 0.28623], [0.57357, 0.99817, 0.27712],
                           [0.58646, 0.99739, 0.26849], [0.59891, 0.99638, 0.26038], [0.61088, 0.99514, 0.25280],
                           [0.62233, 0.99366, 0.24579], [0.63323, 0.99195, 0.23937], [0.64362, 0.98999, 0.23356],
                           [0.65394, 0.98775, 0.22835], [0.66428, 0.98524, 0.22370], [0.67462, 0.98246, 0.21960],
                           [0.68494, 0.97941, 0.21602], [0.69525, 0.97610, 0.21294], [0.70553, 0.97255, 0.21032],
                           [0.71577, 0.96875, 0.20815], [0.72596, 0.96470, 0.20640], [0.73610, 0.96043, 0.20504],
                           [0.74617, 0.95593, 0.20406], [0.75617, 0.95121, 0.20343], [0.76608, 0.94627, 0.20311],
                           [0.77591, 0.94113, 0.20310], [0.78563, 0.93579, 0.20336], [0.79524, 0.93025, 0.20386],
                           [0.80473, 0.92452, 0.20459], [0.81410, 0.91861, 0.20552], [0.82333, 0.91253, 0.20663],
                           [0.83241, 0.90627, 0.20788], [0.84133, 0.89986, 0.20926], [0.85010, 0.89328, 0.21074],
                           [0.85868, 0.88655, 0.21230], [0.86709, 0.87968, 0.21391], [0.87530, 0.87267, 0.21555],
                           [0.88331, 0.86553, 0.21719], [0.89112, 0.85826, 0.21880], [0.89870, 0.85087, 0.22038],
                           [0.90605, 0.84337, 0.22188], [0.91317, 0.83576, 0.22328], [0.92004, 0.82806, 0.22456],
                           [0.92666, 0.82025, 0.22570], [0.93301, 0.81236, 0.22667], [0.93909, 0.80439, 0.22744],
                           [0.94489, 0.79634, 0.22800], [0.95039, 0.78823, 0.22831], [0.95560, 0.78005, 0.22836],
                           [0.96049, 0.77181, 0.22811], [0.96507, 0.76352, 0.22754], [0.96931, 0.75519, 0.22663],
                           [0.97323, 0.74682, 0.22536], [0.97679, 0.73842, 0.22369], [0.98000, 0.73000, 0.22161],
                           [0.98289, 0.72140, 0.21918], [0.98549, 0.71250, 0.21650], [0.98781, 0.70330, 0.21358],
                           [0.98986, 0.69382, 0.21043], [0.99163, 0.68408, 0.20706], [0.99314, 0.67408, 0.20348],
                           [0.99438, 0.66386, 0.19971], [0.99535, 0.65341, 0.19577], [0.99607, 0.64277, 0.19165],
                           [0.99654, 0.63193, 0.18738], [0.99675, 0.62093, 0.18297], [0.99672, 0.60977, 0.17842],
                           [0.99644, 0.59846, 0.17376], [0.99593, 0.58703, 0.16899], [0.99517, 0.57549, 0.16412],
                           [0.99419, 0.56386, 0.15918], [0.99297, 0.55214, 0.15417], [0.99153, 0.54036, 0.14910],
                           [0.98987, 0.52854, 0.14398], [0.98799, 0.51667, 0.13883], [0.98590, 0.50479, 0.13367],
                           [0.98360, 0.49291, 0.12849], [0.98108, 0.48104, 0.12332], [0.97837, 0.46920, 0.11817],
                           [0.97545, 0.45740, 0.11305], [0.97234, 0.44565, 0.10797], [0.96904, 0.43399, 0.10294],
                           [0.96555, 0.42241, 0.09798], [0.96187, 0.41093, 0.09310], [0.95801, 0.39958, 0.08831],
                           [0.95398, 0.38836, 0.08362], [0.94977, 0.37729, 0.07905], [0.94538, 0.36638, 0.07461],
                           [0.94084, 0.35566, 0.07031], [0.93612, 0.34513, 0.06616], [0.93125, 0.33482, 0.06218],
                           [0.92623, 0.32473, 0.05837], [0.92105, 0.31489, 0.05475], [0.91572, 0.30530, 0.05134],
                           [0.91024, 0.29599, 0.04814], [0.90463, 0.28696, 0.04516], [0.89888, 0.27824, 0.04243],
                           [0.89298, 0.26981, 0.03993], [0.88691, 0.26152, 0.03753], [0.88066, 0.25334, 0.03521],
                           [0.87422, 0.24526, 0.03297], [0.86760, 0.23730, 0.03082], [0.86079, 0.22945, 0.02875],
                           [0.85380, 0.22170, 0.02677], [0.84662, 0.21407, 0.02487], [0.83926, 0.20654, 0.02305],
                           [0.83172, 0.19912, 0.02131], [0.82399, 0.19182, 0.01966], [0.81608, 0.18462, 0.01809],
                           [0.80799, 0.17753, 0.01660], [0.79971, 0.17055, 0.01520], [0.79125, 0.16368, 0.01387],
                           [0.78260, 0.15693, 0.01264], [0.77377, 0.15028, 0.01148], [0.76476, 0.14374, 0.01041],
                           [0.75556, 0.13731, 0.00942], [0.74617, 0.13098, 0.00851], [0.73661, 0.12477, 0.00769],
                           [0.72686, 0.11867, 0.00695], [0.71692, 0.11268, 0.00629], [0.70680, 0.10680, 0.00571],
                           [0.69650, 0.10102, 0.00522], [0.68602, 0.09536, 0.00481], [0.67535, 0.08980, 0.00449],
                           [0.66449, 0.08436, 0.00424], [0.65345, 0.07902, 0.00408], [0.64223, 0.07380, 0.00401],
                           [0.63082, 0.06868, 0.00401], [0.61923, 0.06367, 0.00410], [0.60746, 0.05878, 0.00427],
                           [0.59550, 0.05399, 0.00453], [0.58336, 0.04931, 0.00486], [0.57103, 0.04474, 0.00529],
                           [0.55852, 0.04028, 0.00579], [0.54583, 0.03593, 0.00638], [0.53295, 0.03169, 0.00705],
                           [0.51989, 0.02756, 0.00780], [0.50664, 0.02354, 0.00863], [0.49321, 0.01963, 0.00955],
                           [0.47960, 0.01583, 0.01055]]
    return ListedColormap(turbo_colormap_data)


# Cell
import matplotlib.pyplot as plt
import numpy as np
import sys

def plot_dirs(data,
              opacity_of_negative_direction = 0.2,
              size_of_markers = 30,
              range_of_b = (0.0, 1.0e99),
              colormap = 'hsv'):
    "3D scatter plot of gradient scheme in `data`"
    "directions: data[:,:3], b-values: data[:,4]"
    "adapted from https://gist.github.com/jdtournier/16a9af52b67cc8f6fb3253a9ffc23b34"

    bmax = np.max(data[:,3])
    n = [ i for i in np.arange(len(data)) if data[i,3] >= range_of_b[0] and data[i,3] <= range_of_b[1] ]

    b = data[n,3]
    data = data[n,0:3] * np.reshape (b, (-1,1))

    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')

    ax.scatter(data[:,0],  data[:,1],  data[:,2],
               vmin=0, vmax=bmax, c=b, s=size_of_markers,
               alpha=1.0, cmap=plt.get_cmap(colormap))
    ax.scatter(-data[:,0], -data[:,1], -data[:,2],
               vmin=0, vmax=bmax, c=b, s=size_of_markers,
               alpha=opacity_of_negative_direction, cmap=plt.get_cmap(colormap))

    ax.set_box_aspect([1, 1, 1])
    ax.set_position([0, 0, 1, 1])
    ax.set_axis_off()
    return fig, ax

# Cell

import numpy as np
from scipy.special import sph_harm
import matplotlib as mpl

# projection of zonal harmonics to amplitude
ntheta = 91 * 2  # 1 deg steps
theta_1d = np.linspace(0, np.pi, ntheta)
phi_1d = np.array([np.pi])

theta_2d, phi_2d = np.meshgrid(theta_1d, phi_1d)
xyz_2d = np.array([np.sin(theta_2d) * np.sin(phi_2d),
                   np.sin(theta_2d) * np.cos(phi_2d),
                   np.cos(theta_2d)])


def response_to_r(coeff, return_theta=True):
    ls = np.array(range(0, len(coeff) * 2, 2))
    m = 0
    Y = np.zeros((phi_1d.size, ntheta), np.complex128)
    for il, l in enumerate(ls):
        Y += coeff[il] * sph_harm(m, l, phi_2d, theta_2d)
    R = np.linalg.norm(np.abs(Y.real) * xyz_2d, axis=0)
    if return_theta:
        return np.concatenate([theta_1d, theta_1d + np.pi]), np.concatenate([R.flatten(), R.flatten()])
    return np.concatenate([R.flatten(), R.flatten()])


def polarplotstyle(axarr, plain=False, loc='N'):
    for ax in axarr.flatten():
        try:
            ax.set_theta_zero_location(loc)
            for tick in ax.yaxis.get_major_ticks():
                tick.label.set_fontsize(6)
                tick.label.set_alpha(1)
                tick.label.set_color([0.1] * 3)
            ax.set_xticklabels([])
            [i.set_linewidth(0.1) for i in ax.spines.values()]
            ax.axes.spines['polar'].set_visible(False)
            if plain:
                ax.set_yticklabels([])
                ax.grid(False)
            else:
                ax.grid(color=[0.7] * 3, linestyle='-', linewidth=0.2)
        except AttributeError:
            pass


def loadrf(rf, irf=None):
    if isinstance(rf, str):
        if irf: print('response: %i: %s' % (irf, rf))
        return np.loadtxt(rf)
    elif isinstance(rf, np.ndarray):
        return rf
    else:
        raise TypeError(type(rf))


def plot_responses(responses, bs=None, normalise=False, cvalues=None, cmap='turbo', cnorm=None, special_rfs=None, figsize=(10, 2), pplot={'lw':0.5, 'alpha':0.8}):
    """ visualise angular and l=0 dependency of multiple MRtrix3 response functions
    `responses`: MRtrix3 response function files or numpy arrays, assumed to share the same b values
    `bs`: b values
    `normalise`: scale RFs to unit b0 l=0 signal
    """

    rfs = []
    for ir, rf in enumerate(responses):
        rfs.append(loadrf(rf, irf=ir))
        rf = rfs[-1]
        if bs is None:
            bs = list(range(rf.shape[0]))
        assert rf.shape[0] == len(bs), (bs, rf.shape)

    if cmap is None or cmap=='turbo':
        cmap = get_turbo_cm()
    elif isinstance(cmap, str):
        cmap = mpl.cm.get_cmap(cmap)

    showcolorbar = True
    if cvalues is None:
        showcolorbar = False
        if len(rfs) > 1:
            cvalues = [irf / (len(rfs) - 1) for irf in range(len(rfs))]
        else:
            cvalues = [1]

    if cnorm is None:
        cnorm = mpl.colors.Normalize(vmin=min(cvalues), vmax=max(cvalues))

    fig, axarr = plt.subplots(1, len(bs) + 1, squeeze=False, subplot_kw={'projection': 'polar'}, figsize=figsize, dpi=140)
    polarplotstyle(axarr, plain=False)
    fig.delaxes(axarr[0, len(bs)])
    ax_l0 = fig.add_subplot(1, len(bs) + 1, len(bs) + 1)

    for irf, rf in enumerate(rfs):
        c = cmap(cnorm(cvalues[irf]))
        if rf.ndim == 1:
            rf = rf[:, None]
        if normalise:
            rf = rf / rf[0, 0]
        for ib in range(rf.shape[0]):
            theta, R = response_to_r(rf[ib], return_theta=True)
            axarr[0, ib].plot(theta, R, color=c,
                              linewidth=pplot.get('lw', 1), alpha=pplot.get('alpha', 0.8))  # label=str(irf) if (len(rfs) < 5 or irf < 2 or irf > (len(rfs) - 3)) else None

        ax_l0.plot(bs, rf[:, 0], # label=str(irf) if (len(rfs) < 5 or irf < 2 or irf > (len(rfs) - 3)) else None,
                   color=c,
                   linewidth=pplot.get('lw', 1), alpha=pplot.get('alpha', 0.8),)

    if special_rfs is None: special_rfs = []
    for irf, srf in enumerate(special_rfs):
        color = srf.get('color', 'C%i'%irf)
        name = srf.get('name', 'c%i'%irf)
        lw = srf.get('lw', pplot.get('lw', 1))
        alpha = srf.get('alpha', pplot.get('alpha', 1))
        ls = srf.get('ls', pplot.get('ls', '-'))
        rf = loadrf(srf.get('rf'))


        if rf.ndim == 1:
            rf = rf[:, None]
        if normalise:
            rf = rf / rf[0, 0]
        for ib in range(rf.shape[0]):
            theta, R = response_to_r(rf[ib], return_theta=True)
            axarr[0, ib].plot(theta, R, color=color, linewidth=lw, alpha=alpha, ls=ls, label=name)
        ax_l0.plot(bs, rf[:, 0], color=color, linewidth=lw, alpha=alpha, ls=ls, label=name)

    for ax, b in zip(axarr.ravel(), bs):
        ax.set_title(f'b={b}')
    ax_l0.set_xticks(bs)
    ax_l0.set_title('l=0')
    ax_l0.set_xlabel('b')

    plt.tight_layout()
    plt.sca(ax_l0)

    cbar = None
    if showcolorbar:
        fig.subplots_adjust(right=0.95)
        c_map_ax = fig.add_axes([0.97, 0.15, 0.01, 0.7])
        c_map_ax.axes.get_xaxis().set_visible(False)
        cbar = mpl.colorbar.ColorbarBase(c_map_ax, cmap=cmap, norm=cnorm, orientation='vertical')

    return {'fig':fig, 'axarr':axarr, 'ax_l0':ax_l0, 'cbar':cbar}

# f = plot_responses(['/Users/mp/data/dHCP_neo_release3/rf_wm_33.txt', '/Users/mp/data/dHCP_neo_release3/rf_wm_44.txt'],
#                    special_rfs=[{'rf':'/Users/mp/data/dHCP_neo_release3/rf_gm.txt', 'name':'GM'}],
#                    cvalues=[33,44], bs=[0, 0.4, 1, 2.6],
#                    normalise=True)
# plt.sca(f['ax_l0'])
# plt.legend()

# Cell
def plot_response_coef(responses, bs=None, normalise=False, weights=None, weight_labels=None, lmax=6, cvalues=None, cmap='turbo', cnorm=None, special_rfs=None, figsize=(10, 2), pplot={'lw':0.5, 'alpha':0.8}):
    """ visualise coefficients of multiple MRtrix3 response functions
    `responses`: MRtrix3 response function files or numpy arrays, assumed to share the same b values
    `bs`: b values
    `normalise`: scale RFs to unit b0 l=0 signal
    """

    rfs = []
    for ir, rf in enumerate(responses):
        rfs.append(loadrf(rf, irf=ir))
        rf = rfs[-1]
        if bs is None:
            bs = list(range(rf.shape[0]))
        assert rf.shape[0] == len(bs), (bs, rf.shape)

    if cmap is None or cmap=='turbo':
        cmap = get_turbo_cm()
    elif isinstance(cmap, str):
        cmap = mpl.cm.get_cmap(cmap)

    showcolorbar = True
    if cvalues is None:
        showcolorbar = False
        if len(rfs) > 1:
            cvalues = [irf / (len(rfs) - 1) for irf in range(len(rfs))]
        else:
            cvalues = [1]

    if cnorm is None:
        cnorm = mpl.colors.Normalize(vmin=min(cvalues), vmax=max(cvalues))

    if weights is not None:
        weights = np.asarray(weights)
        if len(responses): assert weights.shape[0] == len(responses), (weights.shape, len(responses))

    fig, axarr = plt.subplots(1, lmax//2 + 1 + int(weights is not None), squeeze=False, figsize=figsize, dpi=140)


    for irf, rf in enumerate(rfs):
        c = cmap(cnorm(cvalues[irf]))
        if rf.ndim == 1:
            rf = rf[:, None]
        if normalise:
            rf = rf / rf[0, 0]

        for il in range(min(lmax//2+1, rf.shape[1])):
            axarr[0, il].plot(bs, rf[:, il], color=c,
                              linewidth=pplot.get('lw', 1), alpha=pplot.get('alpha', 0.8))

    if weights is not None:
        for wdim in range(weights.shape[1]):
            wl = None
            if weight_labels is not None:
                wl = weight_labels[wdim]
            axarr[0, -1].plot(cvalues, weights[:,wdim], '.', label=wl)
        axarr[0, -1].plot(cvalues, weights.sum(1), '.', label='sum')


    if special_rfs is None: special_rfs = []
    for irf, srf in enumerate(special_rfs):
        color = srf.get('color', 'C%i'%irf)
        name = srf.get('name', 'c%i'%irf)
        lw = srf.get('lw', pplot.get('lw', 1))
        alpha = srf.get('alpha', pplot.get('alpha', 1))
        ls = srf.get('ls', pplot.get('ls', '-'))
        rf = loadrf(srf.get('rf'))

        if rf.ndim == 1:
            rf = rf[:, None]
        if normalise:
            rf = rf / rf[0, 0]

        for il in range(min(lmax//2+1, rf.shape[1])):
            axarr[0, il].plot(bs, rf[:, il], color=color, linewidth=lw, alpha=alpha, label=name, ls=ls)


    for ax, il in zip(axarr.ravel(), range(lmax//2+1)):
        ax.set_title(f'l={il*2}')
        ax.set_xticks(bs)
        ax.set_xlabel('b')

    plt.tight_layout()
    plt.sca(axarr.ravel()[-1])

    cbar = None
    if showcolorbar:
        fig.subplots_adjust(right=0.95)
        c_map_ax = fig.add_axes([0.97, 0.15, 0.01, 0.7])
        c_map_ax.axes.get_xaxis().set_visible(False)
        cbar = mpl.colorbar.ColorbarBase(c_map_ax, cmap=cmap, norm=cnorm, orientation='vertical')

    return {'fig':fig, 'axarr':axarr, 'cbar':cbar}

# f = plot_response_coef(['/Users/mp/data/dHCP_neo_release3/rf_wm_33.txt', '/Users/mp/data/dHCP_neo_release3/rf_wm_44.txt'], weights=[[0,1], [1,0]],
#                        special_rfs=[{'rf':'/Users/mp/data/dHCP_neo_release3/rf_gm.txt', 'name':'GM'}],
#                        cvalues=[33,44], bs=[0, 0.4, 1, 2.6],
#                        normalise=True)
# plt.sca(f['axarr'].ravel()[0])
# plt.legend()

# Cell


# export

'''
Load and save images in MRtrix format.

Copyright (c) 2017 - Daan Christiaens (daan.christiaens@gmail.com)
'''

import numpy as np
import copy
import gzip


_dtdict = {'Int8': '|i1', 'UInt8': '|u1', 'Int16': '=i2', 'UInt16': '=u2', 'Int16LE': '<i2', 'UInt16LE': '<u2', 'Int16BE': '>i2', 'UInt16BE': '>u2', 'Int32': '=i4', 'UInt32': '=u4', 'Int32LE': '<i4', 'UInt32LE': '<u4', 'Int32BE': '>i4', 'UInt32BE': '>u4', 'Float32': '=f4', 'Float32LE': '<f4', 'Float32BE': '>f4', 'Float64': '=f8', 'Float64LE': '<f8', 'Float64BE': '>f8', 'CFloat32': '=c8', 'CFloat32LE': '<c8', 'CFloat32BE': '>c8', 'CFloat64': '=c16', 'CFloat64LE': '<c16', 'CFloat64BE': '>c16'}
_dtdict_inv = {v: k for k, v in _dtdict.items()}

from collections import defaultdict

class Image (object):
    '''
    Lightweight wrapper class that stores MRtrix images in numpy ndarray objects.

    Class attributes:
      data:        np.ndarray that stores the image data with its datatype and shape
      vox:         image voxel size
      transform:   image transformation matrix
      grad:        image gradient table
      comments:    header comments

    The class also exposes these data attributes:
      shape, ndim, dtype, size, strides, nbytes
    '''

    def __init__(self, data=None, vox=(),
                       transform=np.eye(4),
                       grad=None, comments=None):
        self.data = data
        self.vox = vox
        self.transform = transform
        self.grad = grad
        self.comments = comments if comments is not None else []
        self.header = defaultdict(list)


    _array_attr = ['shape', 'ndim', 'dtype', 'size', 'strides', 'nbytes']

    def __getattr__(self, attribute):
        if attribute in self._array_attr:
            if self.data is None:
                raise AttributeError('Image data not set.')
            return getattr(self.data, attribute)


    def __copy__(self):
        return Image(self.data.copy(), self.vox,
                self.transform.copy(), self.grad.copy(),
                copy.copy(self.comments))

    def copy(self):
        ''' Copy image in memory. '''
        return self.__copy__()


    @classmethod
    def empty_as(cls, hdr):
        ''' Create empty image based off the header of another image. '''
        return cls(None, hdr.vox, hdr.transform, hdr.grad, hdr.comments)


    @property
    def vox(self):
        ''' Image voxel size. '''
        if self.data is None:
            return self._vox
        else:
            n = min(len(self._vox), self.ndim)
            return self._vox[:n] + (self.ndim - n) * (1.,)

    @vox.setter
    def vox(self, v):
        ''' Set voxel size. '''
        self._vox = tuple(map(float, v))


    @property
    def nvox(self):
        ''' Get number of voxels in the image. '''
        if self.data is None:
            return 0
        else:
            return np.prod(self.shape[:3])


    def load(self, filename, read_data=True, memmap=False):
        ''' Load MRtrix .mif or .mif.gz file. '''
        is_gz = False
        if memmap:
            if is_gz:
                raise IOError('memory mapping of .mif.gz files is not supported')
            if not read_data:
                raise IOError('memory mapping requires read_data')
        if filename.endswith('.mif'):
            ofun = open
        elif filename.endswith('.mif.gz'):
            ofun = gzip.open
            is_gz = True
        else:
            raise IOError('file extension not supported: '+str(filename))
        # read image header
        with ofun(filename, 'rt', encoding='latin-1') as f:
            fl = ''
            tr_count = 0
            while fl != 'END':
                fl = f.readline().strip()
                if fl.startswith('dim'):
                    imsize = tuple(map(int, fl.split(':')[1].strip().split(',')))
                elif fl.startswith('vox'):
                    self.vox = fl.split(':')[1].strip().split(',')
                elif fl.startswith('layout'):
                    layout = fl.split(':')[1].strip().split(',')
                elif fl.startswith('datatype'):
                    dtstr = fl.split(':')[1].strip()
                    dt = np.dtype(_dtdict.get(dtstr, 'u1'))
                elif fl.startswith('file'):
                    offset = int(fl.split('.')[1].strip())
                elif fl.startswith('transform'):
                    self.transform[tr_count,:] = np.array(fl.split(':')[1].strip().split(','), dtype=float)
                    tr_count = tr_count + 1
                elif fl.startswith('labels'):
                    self.labels = fl.split(':')[1].strip()
                elif fl.startswith('units'):
                    self.units = fl.split(':')[1].strip()
                elif fl.startswith('comments'):
                    self.comments.append(fl[9:].strip())
                elif fl.startswith('dw_scheme'):
                    gbrow = np.array(fl.split(':')[1].strip().split(','), dtype=float)
                    if self.grad is None:
                        self.grad = gbrow
                    else:
                        self.grad = np.vstack([self.grad, gbrow])
                elif ':' in fl:
                    k = fl.split(':')[0]
                    self.header[k].append(fl[len(k)+1:].strip())
        if read_data:
            # read image data
            with ofun(filename, 'rb') as f:
                if is_gz:
                    f.seek(offset, 0)
                    buf = f.read()
                    image = np.frombuffer(buffer=buf, dtype=dt)
                elif memmap:
                    image = np.memmap(f, mode='r', dtype=dt, offset=offset)  # offset required in memmap
                else:
                    f.seek(offset, 0)
                    image = np.fromfile(file=f, dtype=dt)
                if (dtstr == 'Bit'):
                    image = np.unpackbits(image)
                s, o = self._layout_to_strides(layout, imsize, dt)
                self.data = np.ndarray(shape=imsize, dtype=dt, buffer=image, strides=s, offset=o)
        return self


    def save(self, filename):
        ''' Save image to MRtix .mif file. '''
        if self.data is None:
            raise RuntimeError('Image data not set.')
        # write image header
        with open(filename, 'w', encoding='latin-1') as f:
            f.write('mrtrix image\n')
            f.write('dim: ' + self._to_csv(self.shape) + '\n');
            f.write('vox: ' + self._to_csv(self.vox) + '\n')
            f.write('layout: ' + self._to_csv(self.layout) + '\n')
            f.write('datatype: ' + _dtdict_inv[self.dtype.descr[0][1]] + '\n')
            f.write('transform: ' + self._to_csv(self.transform[0,:]) + '\n')
            f.write('transform: ' + self._to_csv(self.transform[1,:]) + '\n')
            f.write('transform: ' + self._to_csv(self.transform[2,:]) + '\n')
            if self.labels is not None:
                f.write('labels: ' + self._to_csv(self.labels) + '\n')
            if self.units is not None:
                f.write('units: ' + self._to_csv(self.units) + '\n')
            for comment in self.comments:
                f.write('comments: ' + comment + '\n')
            for k in [] if self.grad is None else range(self.grad.shape[0]):
                f.write('dw_scheme: ' + self._to_csv(self.grad[k,:]) + '\n')
            for k, v in self.header.items():
                if k =='command_history':
                    continue
                for l in v:
                    # print(k,l)
                    f.write(k + ': ' + str(l) + '\n')
            f.flush()
            offset = f.tell() + 13
            offset += int(np.floor(np.log10(offset))) + 1
            f.write('file: . {:d}\n'.format(offset))
            f.write('END\n')
            f.flush()
        # write image data
        with open(filename, 'ab') as f:
            self.data.ravel(order='K').tofile(f)
        return self


    def _layout_to_strides(self, layout, size, dtype):
        strides = [0 for l in layout]
        stride, offset = int(dtype.itemsize), 0
        for dim in sorted(range(len(layout)), key=lambda k: int(layout[k][1:])):
            if layout[dim][0] == '-':
                strides[dim] = -stride
                offset += (size[dim]-1) * stride
            else:
                strides[dim] = stride
            stride *= size[dim]
        return strides, offset


    @property
    def layout(self):
        ''' Data layout in output file.
        Currently, only positive strides are supported due to numpy limitations.
        '''
        #return tuple(('-' if self.strides[s]<0 else '+') + str(s) for s in np.argsort(np.argsort(np.abs(self.strides))))
        return tuple('+'+str(s) for s in np.argsort(np.argsort(np.abs(self.strides))))


    def _to_csv(self, a):
        return ','.join(map(str, a))


    def __str__(self):
        out = 'mrtrix image:'
        if self.data is not None:
            out += '\n  dimensions: ' + self._to_csv(self.shape) + '\n'
            out += '  voxel size: ' + self._to_csv(self.vox) + '\n'
            out += '  datatype: ' + _dtdict_inv[self.dtype.descr[0][1]] + '\n'
            tx, ty, tz = str(self.transform[:3,:]).split('\n')
            out += '  transform: ' + tx + '\n'
            out += '             ' + ty + '\n'
            out += '             ' + tz
            if self.grad is not None:
                out += '\n  gradient table: {:d} x {:d}'.format(*self.grad.shape)
        else:
            out += ' empty'
        return out


    def __iter__(self):
        self._pos = 0
        return self


    def __next__(self):
        if self._pos >= self.nvox:
            raise StopIteration
        out = self.data[self._pos % self.shape[0],
                        self._pos//self.shape[0] % self.shape[1],
                        self._pos//np.prod(self.shape[:2]) % self.shape[2]]
        self._pos += 1
        return out


def load_mrtrix(filename, **kwargs):
    ''' Load image in mrtrix format. '''
    img = Image()
    img.load(filename, **kwargs)
    return img


def save_mrtrix(filename, image):
    ''' Save image in mrtrix format. '''
    image.save(filename)
